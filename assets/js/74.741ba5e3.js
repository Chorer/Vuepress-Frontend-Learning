(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{614:function(t,v,_){"use strict";_.r(v);var a=_(12),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"_1-头部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-头部字段"}},[t._v("#")]),t._v(" 1. 头部字段")]),t._v(" "),_("h3",{attrs:{id:"通用头部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通用头部字段"}},[t._v("#")]),t._v(" 通用头部字段")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Cache-Control")]),t._v("：控制缓存策略")]),t._v(" "),_("li",[_("code",[t._v("Date")]),t._v("：创建报文的日期时间")]),t._v(" "),_("li",[_("code",[t._v("Transfer-Encoding")]),t._v("：指的是在传输层面，报文的编码方式是怎么样的，比如设置成 chunk，那么报文就会被拆成很多个块")]),t._v(" "),_("li",[_("code",[t._v("Content-Language")]),t._v("：报文主体的自然语言")]),t._v(" "),_("li",[_("code",[t._v("Content-Encoding")]),t._v("：报文主体的编码压缩方式，比如 gzip 或者 brotli")]),t._v(" "),_("li",[_("code",[t._v("Content-Length")]),t._v("：报文主体的长度，如果开启了 gzip 压缩，则指的是压缩后的长度")]),t._v(" "),_("li",[_("code",[t._v("Content-Type")]),t._v("：报文主体的类型。\n"),_("ul",[_("li",[t._v("比如可以指代服务端返回的数据类型，包括 text/html，image/gif，application/json 等；")]),t._v(" "),_("li",[t._v("比如可以指代客户端的请求体数据类型，通常 post 请求使用，包括：\n"),_("ul",[_("li",[t._v("application/x-www-form-urlencoded：最常用的，用于传输简单数据，请求体类似于 "),_("code",[t._v("a=1&b=2")])]),t._v(" "),_("li",[t._v("multipart/form-data：用于上传文件")]),t._v(" "),_("li",[t._v("application/json：用于传输数据，请求体是序列化之后的 JSON 字符串")])])])])]),t._v(" "),_("li",[_("code",[t._v("Connection")]),t._v("：http/1.0 中需要手动设置 keep-alive 开启 tcp 持久连接，http/1.1 默认开启，设置 close 可以关闭")]),t._v(" "),_("li",[_("code",[t._v("Keep-Alive")]),t._v("：可以设置持久连接的时间")])]),t._v(" "),_("h3",{attrs:{id:"请求头部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求头部字段"}},[t._v("#")]),t._v(" 请求头部字段")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Accept")]),t._v("：客户端告诉服务端，自己支持的 MIME 类型，具体可以包括下面这些：\n"),_("ul",[_("li",[t._v("text：text/html, text/plain, text/css 等")]),t._v(" "),_("li",[t._v("image：image/gif, image/jpeg, image/png 等")]),t._v(" "),_("li",[t._v("audio/video：audio/mpeg, video/mp4 等")]),t._v(" "),_("li",[t._v("application：application/json, application/javascript, application/pdf, application/octet-stream")])])]),t._v(" "),_("li",[_("code",[t._v("Accept-Charset")]),t._v("、"),_("code",[t._v("Accept-Encoding")]),t._v("、"),_("code",[t._v("Accept-Language")])]),t._v(" "),_("li",[_("code",[t._v("Host")]),t._v("：资源所在的服务器")]),t._v(" "),_("li",[_("code",[t._v("If-Matched")]),t._v("、"),_("code",[t._v("If-None-Matched")]),t._v("、"),_("code",[t._v("If-Modified-Since")]),t._v("，和协商缓存相关")]),t._v(" "),_("li",[_("code",[t._v("User-Agent")]),t._v("：用户代理，携带客户端的信息")]),t._v(" "),_("li",[_("code",[t._v("Cookie")]),t._v("：携带服务端之前发送过来的 cookie")])]),t._v(" "),_("h3",{attrs:{id:"响应头部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应头部字段"}},[t._v("#")]),t._v(" 响应头部字段")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Allow")]),t._v("：服务端告诉客户端，自己支持的请求方法")]),t._v(" "),_("li",[_("code",[t._v("Expire")]),t._v("：http/1.0 时代使用的，用于指定资源缓存的过期时间")]),t._v(" "),_("li",[_("code",[t._v("ETag")]),t._v("：返回资源对应的哈希值，用于协商缓存")]),t._v(" "),_("li",[_("code",[t._v("Last-Modified")]),t._v("：最后一次修改资源的时间，用于协商缓存")]),t._v(" "),_("li",[_("code",[t._v("Location")]),t._v("：让客户端重定向到另一个地址")]),t._v(" "),_("li",[_("code",[t._v("Vary")]),t._v("：和代理服务器缓存相关")]),t._v(" "),_("li",[_("code",[t._v("Set-Cookie")]),t._v("：发送给客户端的 cookie。设置 httopOnly 指明该 cookie 无法通过 js 获取，设置 secure 指明该 cookie 只能在 https 请求中携带")])]),t._v(" "),_("h2",{attrs:{id:"_2-请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-请求方法"}},[t._v("#")]),t._v(" 2. 请求方法")]),t._v(" "),_("h3",{attrs:{id:"都有哪些请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#都有哪些请求方法"}},[t._v("#")]),t._v(" 都有哪些请求方法？")]),t._v(" "),_("ul",[_("li",[t._v("GET: 通常用来获取资源")]),t._v(" "),_("li",[t._v("HEAD: 获取资源的元信息（HEAD 即 HEADER，保存资源元信息的请求头）")]),t._v(" "),_("li",[t._v("POST: 提交数据，即上传数据")]),t._v(" "),_("li",[t._v("PUT: 修改数据")]),t._v(" "),_("li",[t._v("DELETE: 删除资源（几乎用不到）")]),t._v(" "),_("li",[t._v("CONNECT: 建立连接隧道，用于代理服务器")]),t._v(" "),_("li",[t._v("OPTIONS: 列出可对资源实行的请求方法。跨域请求如果是复杂请求，首先会发送一个预检请求，这个请求使用的方法是 OPTIONS")]),t._v(" "),_("li",[t._v("TRACE: 追踪请求-响应的传输路径")])]),t._v(" "),_("h3",{attrs:{id:"get-和-post-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别？")]),t._v(" "),_("blockquote",[_("p",[t._v("严格来说，GET 和 POST 没有区别，所谓的区别只是指它们在 HTTP 规范下有区别")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("==参数==：GET 的参数"),_("strong",[t._v("一般")]),t._v("附加在 URL 中，POST 的参数"),_("strong",[t._v("一般")]),t._v("出现在请求体（body）中（注意这里说的是一般的做法，实际上反过来也是可以的）")])]),t._v(" "),_("li",[_("p",[t._v("==安全性==：实际上，如果使用的是明文传输的 HTTP，那么不管是 GET 还是 POST 都是不安全的，这和用 URL 传输数据还是 body 传输数据无关")])]),t._v(" "),_("li",[_("p",[t._v("==幂等性==：重复 GET 始终返回相同的结果，对要访问的数据没有副作用，所以 GET 是幂等的；重复 POST 可能产生副作用，所以 POST 是非幂等的")])]),t._v(" "),_("li",[_("p",[t._v("==缓存==：由于 GET 是幂等的，所以 GET 的结果可以缓存在浏览器或者代理服务器中，而 POST 不能")])]),t._v(" "),_("li",[_("p",[t._v("==编码==：GET 通常是通过 URL 传输数据的，这决定了它只支持 ASCII 码；POST 通常是通过 body 传输数据的，这决定了它可以支持任意二进制")])]),t._v(" "),_("li",[_("p",[t._v("==长度==：GET 通常是通过 URL 传输数据的，而 URL 长度是有限的，所以 GET 能够传输的数据长度是有限的；POST 通常是通过 body 传输数据的，因此可以认为它传输的数据长度是无限的")])]),t._v(" "),_("li",[_("p",[t._v("==请求次数==：通常会认为，GET 请求只需要发一次，而 POST 请求需要发两次 —— 第一次发送请求头，收到 100（continue）响应状态码后，第二次再发送请求体。其实应该将这种情况理解为一种"),_("strong",[t._v("优化手段")]),t._v("，而"),_("strong",[t._v("不是 GET 和 POST 本质上的区别")]),t._v("。比如用户通过 POST 请求上传一个很大的文件，那么可以先发请求头，服务端若判断此次请求是不合法的（比如用户没有权限上传），那么就可以直接返回 4xx，客户端就没必要再去发送请求体了，相比一次性发送所有数据来说，这种做法减少了带宽的浪费。但话又说回来，如果这次 POST 的数据很小很小，那么请求头 + 请求体一次 POST 过去，其实也是可以的。最后，具体是发一次还是两次，也和浏览器实际采用的策略有关，并不是绝对的。")])])]),t._v(" "),_("h2",{attrs:{id:"_3-响应状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-响应状态码"}},[t._v("#")]),t._v(" 3. 响应状态码")]),t._v(" "),_("p",[t._v("101：表示将协议从 http 切换/升级到 websocket")]),t._v(" "),_("p",[t._v("2XX：表示成功，比如 200")]),t._v(" "),_("p",[t._v("3XX：表示重定向。301 表示永久重定向；302 表示临时重定向；304 和重定向无关，表示资源未修改，可以使用先前的缓存")]),t._v(" "),_("p",[t._v("4XX：客户端错误。401 表示请求语法错误；402 表示认证失败；403 表示权限不足")]),t._v(" "),_("p",[t._v("5XX：服务端错误。501 表示服务器内部错误；502 表示网关错误；503 表示服务器超负载，正在停机维护")]),t._v(" "),_("h2",{attrs:{id:"_4-http-性能优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-性能优化"}},[t._v("#")]),t._v(" 4. HTTP 性能优化")]),t._v(" "),_("p",[t._v("http 的性能优化可以从三个角度入手，分别是"),_("strong",[t._v("服务端、客户端和传输链路")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("服务端：相关的指标有吞吐量（RPS、TPS、QPS，即每秒的请求数）、并发数（可以承载支持多少个客户端）、响应时间、其他资源的利用率（CPU、内存、网卡和硬盘等）")]),t._v(" "),_("li",[t._v("客户端：基本的指标是延迟，延迟和地理距离、带宽、DNS 查询、TCP 握手等有关")]),t._v(" "),_("li",[t._v("传输链路：第一公里的带宽、中间一公里（CDN）")])]),t._v(" "),_("h2",{attrs:{id:"_5-http-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-http-2"}},[t._v("#")]),t._v(" 5. HTTP/2")]),t._v(" "),_("h3",{attrs:{id:"新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新特性"}},[t._v("#")]),t._v(" 新特性")]),t._v(" "),_("h4",{attrs:{id:"头部压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),_("p",[t._v("http 1.x 中，可以通过 content-encoding：gzip 对响应报文的响应实体（body）进行压缩，但对于可能比响应实体更大的响应头，却反而没有对应的压缩优化手段。为此，http2 使用了 HPACK 算法对头部进行了压缩，减小了报文的体积。")]),t._v(" "),_("blockquote",[_("p",[t._v("简单说一下 HPACK 算法")])]),t._v(" "),_("p",[t._v("浏览器和服务器各自维护一张表，表的每一个索引会对应一个 key-value，每次发现需要发送重复的头部字段的时候，只需要发送索引即可，接收方再查表获取具体的 key-value。相比于实际发送头部字段，发送索引可以省下不少字节数。")]),t._v(" "),_("h4",{attrs:{id:"头部数据变化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#头部数据变化"}},[t._v("#")]),t._v(" 头部数据变化")]),t._v(" "),_("p",[t._v("报文的头部包括头部字段和请求行（状态行）。除了对头部整体进行了压缩之外，HTTP/2 还将头部字段的 key 改为全小写，并利用伪头部字段代替了原先的请求行（状态行）。比如说：")]),t._v(" "),_("p",[t._v("在 HTTP/1 中，请求行是这样的：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("GET / HTTP/1.1\nHost： www.example.com\n")])])]),_("p",[t._v("而在 HTTP/2 中，这些将转化为如下的伪头部字段：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(":scheme: https\n:method: GET\n:path: /\n:authority: www.example.com\n")])])]),_("p",[t._v("在 HTTP/1 中，状态行是这样的：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("HTTP/1.1 200 OK\n")])])]),_("p",[t._v("而在 HTTP/2 中，这将转化为如下的伪首部字段：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(":status: 200\n")])])]),_("p",[t._v("注意：协议版本、错误信息这些字段现在已经被废除了。")]),t._v(" "),_("p",[t._v("为什么要进行这个改动呢？一是为了在编码形式上，整体采用一个统一的 key-value 结构（当然，为了与原有字段区分开，防止冲突，伪头部字段前面都有一个 "),_("code",[t._v(":")]),t._v("）；二是为了让它们也能够享受头部压缩带来的增益。")]),t._v(" "),_("h4",{attrs:{id:"二进制分帧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧"}},[t._v("#")]),t._v(" 二进制分帧")]),t._v(" "),_("p",[t._v("报文不再采用 ASCII 码的文本形式传输，而是直接使用二进制格式传输。在此基础上，把之前的 header + body 的报文结构打散成一个个二进制帧，HEADERS 类型的帧负责存放头部数据，DATA 类型的帧负责存放实体数据。采用二进制分帧之后，浏览器和服务器解析报文的速度加快了。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/6.png",alt:""}})]),t._v(" "),_("h4",{attrs:{id:"流和多路复用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流和多路复用"}},[t._v("#")]),t._v(" 流和多路复用")]),t._v(" "),_("p",[t._v("在解释流之前，先看看在 http 的发展历程中，是如何发送多个 http 请求的：")]),t._v(" "),_("p",[t._v("==短连接==：")]),t._v(" "),_("p",[t._v("一个 TCP 连接只能处理一轮请求-响应，一旦服务端返回响应，TCP 连接就会断开。下一轮的请求-响应必须重新创建一个 TCP 连接")]),t._v(" "),_("p",[t._v("缺点：短连接需要频繁地创建 TCP 连接，频繁地握手和挥手，非常耗时")]),t._v(" "),_("p",[t._v("==长连接/持久连接/连接保活/连接复用==：")]),t._v(" "),_("p",[t._v("允许一个 TCP 连接供多轮请求-响应使用。http 1.0 通过显式声明 "),_("code",[t._v("Connection：keep-alive")]),t._v(" 开启长连接，而 http 1.1 默认就是开启长连接的，无需声明")]),t._v(" "),_("p",[t._v("缺点：无法解决 "),_("strong",[t._v("http 层面的队头阻塞问题")]),t._v(" —— 请求-响应是串行的，只有 A 请求返回响应，B 请求才能发出，若 A 请求迟迟无法返回响应，则会阻塞 B 请求")]),t._v(" "),_("p",[t._v("==管道化/管线化/流水线/pipelining==：")]),t._v(" "),_("p",[t._v("http 1.1 引入了管道化，允许连续发出多个请求，而不是说某个响应返回之后才能发送请求")]),t._v(" "),_("p",[t._v("缺点：依然无法从根本上解决 http 队头阻塞问题。因为响应的返回顺序和请求的发出顺序是一致的，若 A 请求迟迟无法返回响应，则 B 请求的响应也会无法返回")]),t._v(" "),_("p",[t._v("==TCP 并发连接 + 域名分片==：")]),t._v(" "),_("p",[t._v("既然在同一个 TCP 连接上会阻塞，那么就多开几个 TCP 连接，然后把被阻塞的请求“挪到”其它 TCP 连接上，这样就互不影响了。浏览器允许针对一个域名开最多 6~8 个并发 TCP 连接。")]),t._v(" "),_("p",[t._v("如果并发的 TCP 并发连接还是不够用怎么办呢？可以在此基础上进行域名分片。比如对于 "),_("code",[t._v("baidu.com")]),t._v("，可以产生多个二级域名："),_("code",[t._v("aaa.baidu.com")]),t._v(" 、"),_("code",[t._v("bbb.baidu.com")]),t._v("……这些域名最终都会指向 ip 地址相同的一个服务器，但实际可以达到的并发 TCP 连接数将是 域名数*6~8 个")]),t._v(" "),_("p",[t._v("缺点：在单个 TCP 连接上仍然存在队头阻塞问题；并发的 TCP 连接会竞争带宽；TCP 连接的利用率不高")]),t._v(" "),_("p",[t._v("==多路复用==：")]),t._v(" "),_("p",[t._v("http/2 采用了二进制分帧，在此基础上实现了流。在“流”的层面上看，消息是一些有序的“帧”序列，而在“连接”的层面上看，消息却是乱序收发的“帧”。基于流就实现了多路复用，真正意义上解决了 http 层面的队头阻塞问题。")]),t._v(" "),_("p",[t._v("多路复用允许只靠一个 TCP 连接就能同时进行多个请求-响应，这些请求-响应之间没有所谓的先后顺序，互不影响（假设不存在依赖），因而也不存在阻塞问题。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/18.jpg",alt:""}})]),t._v(" "),_("h4",{attrs:{id:"服务端推送-server-push"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务端推送-server-push"}},[t._v("#")]),t._v(" 服务端推送（server push）")]),t._v(" "),_("p",[t._v("指的是服务端可以提前返回客户端将来可能会请求的资源。比如客户端只向服务端请求 index.html，但是 index.html 里面引用了其它资源（比如 style.css 等），那么服务端会把这些资源也一并返回，避免客户端需要针对这些资源再发一次请求。")]),t._v(" "),_("h3",{attrs:{id:"如何开启"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何开启"}},[t._v("#")]),t._v(" 如何开启")]),t._v(" "),_("p",[t._v("那么如何开启 HTTP/2 呢？其实很简单，只需要配置一下 Nginx，将 "),_("code",[t._v("listen 443 ssl")]),t._v(" 改为 "),_("code",[t._v("listen 443 ssl http2")])]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[t._v("server "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//listen 443 ssl;")]),t._v("\n  listen "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v(" ssl http2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n  server_name localhost"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n  location "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),_("h3",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("p",[t._v("HTTP/2 的缺点如下：")]),t._v(" "),_("ul",[_("li",[t._v("http/2 的多路复用解决了 http 队头阻塞问题，但是没有解决 tcp 队头阻塞问题")]),t._v(" "),_("li",[t._v("多路复用其实是有缺点的，因为它没有限制同时可以发送的请求数量，一旦请求数量暴增，会给服务器带来很大的压力")])]),t._v(" "),_("h2",{attrs:{id:"_6-http-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-http-3"}},[t._v("#")]),t._v(" 6. HTTP/3")]),t._v(" "),_("p",[t._v("HTTP/3 最大的一个变化在于抛弃了 TCP，采用了基于 UDP 的 QUIC 协议。")]),t._v(" "),_("h3",{attrs:{id:"tcp-存在的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-存在的问题"}},[t._v("#")]),t._v(" TCP 存在的问题")]),t._v(" "),_("p",[t._v("现有的 HTTP 一直以来都是依赖于 TCP 协议，而 TCP 协议存在着不少问题。")]),t._v(" "),_("h4",{attrs:{id:"_1-tcp-队头阻塞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-队头阻塞"}},[t._v("#")]),t._v(" 1）TCP 队头阻塞")]),t._v(" "),_("p",[t._v("HTTP 层面的队头阻塞指的是，由于上一个请求迟迟无法响应，导致后面的请求被阻塞；而 TCP 层面也存在队头阻塞问题，它指的是由于单个数据包丢失而导致的阻塞问题，TCP 队头阻塞问题不管是 HTTP/1.1 还是 HTTP/2 都无法解决。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("在 HTTP/1.1 中："),_("img",{attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/19.jpg",alt:""}})]),t._v(" "),_("p",[t._v("在 TCP 层面来看，数据会被拆分成多个小的数据包，如果 3 号数据包丢失了，那么就必须等待 3 号包的重传，4、5 号包即使到达也无法被应用层处理。")])]),t._v(" "),_("li",[_("p",[t._v("在 HTTP/2 中："),_("img",{attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/18.jpg",alt:""}})]),t._v(" "),_("p",[t._v("情况更加严重，因为 HTTP/2 采用的是多路复用，如果其中任意一路数据流发生了丢包，那么该 TCP 连接中的所有请求都会被阻塞。所以在这里，并发建立多个 TCP 连接反而不算是缺点，因为只是一个 TCP 发生队头阻塞，其它 TCP 连接不受影响。")])])]),t._v(" "),_("h4",{attrs:{id:"_2-建立连接时的握手耗时"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-建立连接时的握手耗时"}},[t._v("#")]),t._v(" 2）建立连接时的握手耗时")]),t._v(" "),_("p",[t._v("从发送端到接收端的一去一回叫做一个 RTT（round trip time），即网络延迟。TCP 三次握手需要一去一回一去，消耗 1.5 RTT；如果使用的是 HTTPS 协议，那么还需要额外进行 TLS 握手 —— TLS 1.2 四次握手需要 2RTT，TLS 1.3 三次握手需要 1RTT，所以总共需要 3~4 RTT。如果发送端和接收端地理距离较远，完成所有握手可能就需要 300~400 毫秒，这个延迟对于用户来说可能是比较明显的。")]),t._v(" "),_("blockquote",[_("p",[t._v("既然 TCP 存在着这么多问题，那么为什么不设法改进 TCP 呢？")])]),t._v(" "),_("p",[t._v("原因是这种改进非常困难。一个是中间设备僵化，包括防火墙、网关、路由器等长期以来已经习惯了现有的 TCP 协议，即使我们对 TCP 进行了升级改进，中间设备也可能无法理解这些改动；另一个则是受限于操作系统，TCP 是在操作系统内核实现的，而操作系统的升级不是一件简单的事。这两个问题最终导致 TCP 陷入了僵化，很多改进举步维艰，比如 TCP fast open 至今也没有得到非常全面的支持。")]),t._v(" "),_("p",[t._v("那么是否可以提出一种不同于 TCP 和 UDP 的新协议呢？也不行，因为还是无法绕开中间设备僵化的问题。")]),t._v(" "),_("p",[t._v("所以，HTTP/3 最终就实现了一种折衷的方案，也就是基于 UDP 的 QUIC （quick udp internet connection）协议。")]),t._v(" "),_("h3",{attrs:{id:"quic-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#quic-协议"}},[t._v("#")]),t._v(" QUIC 协议")]),t._v(" "),_("p",[t._v("下面是 HTTP/2 和 HTTP/3 的协议栈对比图：")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/20.jpg"}}),t._v(" "),_("p",[t._v("可以看到，HTTP/3 采用的 QUIC 协议在传输层改为使用 UDP，同时在应用层集合了 TCP 的可靠性、TLS 的安全性以及 HTTP/2 的并发性，具体来说包括：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("集成了 TCP 的特性：虽然 UDP 层无法实现可靠传输，但 QUIC 实现了类似 TCP 的重传机制、流量控制和拥塞控制等，确保数据的可靠传输")])]),t._v(" "),_("li",[_("p",[t._v("集成了 TLS 的加密功能：目前 QUIC 使⽤的是 TLS1.3，握手仅需 1RTT")])]),t._v(" "),_("li",[_("p",[t._v("实现了 HTTP/2 的多路复用功能：但和 TCP 不同的是，QUIC 实现了在同⼀物理连接上可以有多个独立的逻辑数据流：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/21.jpg",alt:""}}),t._v("由于数据流是自顾自单独传输的，即使其中一个数据流发生了丢包，影响的也只是自己，和其它数据流无关。所以不存在 TCP 队头阻塞的问题。")])]),t._v(" "),_("li",[_("p",[t._v("实现了快速握手功能：传输层是面向无连接的 UDP，本身就是 0RTT，再加上加密层的 RTT 可以压缩至 0 个，所以 QUIC 可以只通过 0~1RTT 就建立连接，这意味着 QUIC 可以用最快的速度来收发数据，并大大提升首次打开页面的速度。")])])]),t._v(" "),_("h3",{attrs:{id:"http-3-的推广"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3-的推广"}},[t._v("#")]),t._v(" HTTP/3 的推广")]),t._v(" "),_("p",[t._v("HTTP/3 的 QUIC 协议不会受到中间设备和操作系统的限制，只需要浏览器端和服务器端的应用支持 QUIC 即可。但目前来说，这种支持度还不够，且系统内核以及中间设备对 UDP 的优化程度也远低于 TCP，所以 HTTP/3 的推广还需要很长的时间。")])])}),[],!1,null,null,null);v.default=e.exports}}]);