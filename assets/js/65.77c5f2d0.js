(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{604:function(e,s,t){"use strict";t.r(s);var a=t(12),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"安装和使用-npm-包需要用到哪些东西"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装和使用-npm-包需要用到哪些东西"}},[e._v("#")]),e._v(" 安装和使用 npm 包需要用到哪些东西")]),e._v(" "),t("ul",[t("li",[e._v("nvm：不同项目可能对 Nodejs 的版本要求不同，nvm 可以方便地安装并切换 Nodejs 的不同版本")]),e._v(" "),t("li",[e._v("nrm：国内下载 npm 包速度很慢，nrm 可以方便地切换不同的镜像源")]),e._v(" "),t("li",[e._v("yarn/pnpm：除了 npm 之外，还有速度更快地包管理器 yarn 和 pnpm。nrm 设置的镜像源同样可以作用于这两个包管理器")]),e._v(" "),t("li",[e._v("npx：方便地执行 npm 包提供的指令，不需要 cd 进目录里执行")])]),e._v(" "),t("h2",{attrs:{id:"dependencies、devdependencies-和-peerdependencies-三者的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependencies、devdependencies-和-peerdependencies-三者的区别"}},[e._v("#")]),e._v(" dependencies、devDependencies 和 peerDependencies 三者的区别")]),e._v(" "),t("p",[e._v("先说说 dependencies 和 devDependencies：")]),e._v(" "),t("ul",[t("li",[e._v("首先，如果我们只是开发普通的 web 应用，那么使用哪一种依赖其实区别都是不大的，因为不管哪一种，最终都会被打包进 bundle 中，而我们最终部署的、使用的也只是这些 bundle 而已")]),e._v(" "),t("li",[e._v("但是，如果我们开发的是供别人使用的 npm 包，那这两者就有区别了。别人在项目中引用我们的 npm 包，为了让包可以正常运行，就必须安装生产依赖 dependencies，而开发依赖 devDependencies 只是开发 npm 包的时候使用的，对于他们来说就不需要安装了。如果我们不区分这两者，用户可能就少装或者多装了依赖。")])]),e._v(" "),t("p",[e._v("那么 peerDependencies 又是什么呢？举个例子，假如用户的项目需要引用我们的包 A，我们的包又通过 dependencies 引用了包 B，那么他们的项目结构可能是这样子的：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" project\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" node_modules\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("A")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\t\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" node_modules\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("B")]),e._v("\n")])])]),t("p",[e._v("那么他们要在项目中引用 B，就会很麻烦。而如果我们的包是通过 peerDependencies 引用了包 B，那么项目结构就会是这样：")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" project\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" node_modules\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("A")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\t\t"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[e._v("B")]),e._v("\n")])])]),t("p",[e._v("可以看到，A 和 B 变成了同级依赖，引用 B 就很简单了。")]),e._v(" "),t("p",[e._v("从 npm@7 开始，会自动安装某个包的 peerDependencies。举个例子，less-loader 有一个 peerDependencies 是 less，所以安装 less-loader 后会自动在同一目录安装 less，我们就不需要手动去安装 less 了。如果 peerDependencies 要求的版本过高怎么办呢？比如 less-loader@10 有一个 peerDependencies 是 webpack@5，而我们使用的是 webpack@4，那么这时候安装就会报错，应该更换低版本的 less-loader。")])])}),[],!1,null,null,null);s.default=n.exports}}]);