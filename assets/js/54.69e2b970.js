(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{594:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"基本数据类型之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型之间的转换"}},[t._v("#")]),t._v(" 基本数据类型之间的转换")]),t._v(" "),a("h3",{attrs:{id:"显式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式转换"}},[t._v("#")]),t._v(" 显式转换")]),t._v(" "),a("p",[t._v("显式转换很好理解，一般使用转型函数完成：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  1   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  true")]),t._v("\n")])])]),a("h3",{attrs:{id:"隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换"}},[t._v("#")]),t._v(" 隐式转换")]),t._v(" "),a("p",[t._v("隐式转换通常发生在算术操作或者条件语句中：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1                 操作数中没有字符串，+ 视为加号，两边转化为数字并计算")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1false"          操作数中有字符串，+ 视为拼接符号，两边转化为字符串并拼接，返回 "1false"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v("          \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.2               ++  --  +  -  /  %  >  <  >=  <= 通常会将操作数转化为数字（且不带小数点后的 0）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.20"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false             条件语句，undefined 属于假值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined => false")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false             跟在 ! 后面的部分会被转化为布尔值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("    \n")])])]),a("h2",{attrs:{id:"基本数据类型和引用数据类型之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和引用数据类型之间的转换"}},[t._v("#")]),t._v(" 基本数据类型和引用数据类型之间的转换")]),t._v(" "),a("h3",{attrs:{id:"_1-原始值转换为-object-装箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原始值转换为-object-装箱"}},[t._v("#")]),t._v(" 1）原始值转换为 Object（装箱）")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原本是基本类型字符串")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了能调用字符串的方法，这里隐式装箱成了一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里显式装箱成了一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这也是显式装箱的一种方式")]),t._v("\n")])])]),a("p",[t._v("注意两个地方：")]),t._v(" "),a("ul",[a("li",[t._v("装箱对象的生命周期很短，在上面的 "),a("code",[t._v("str.slice(1)")]),t._v(" 执行完毕之后，这个装箱对象就销毁了。也就是说，它“只有在必须充当一个装箱对象的时候，才是一个装箱对象”。")]),t._v(" "),a("li",[a("code",[t._v("new String(1)")]),t._v(" 和 "),a("code",[t._v("String(1)")]),t._v("是不一样的，前者是把基本类型装箱为一个对象，创建了一个新的实例；后者只是一个转型函数，把数字转型为字符串")])]),t._v(" "),a("h3",{attrs:{id:"_2-object-转换为原始值-拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-转换为原始值-拆箱"}},[t._v("#")]),t._v(" 2）Object 转换为原始值（拆箱）")]),t._v(" "),a("p",[t._v("前面说过，"),a("strong",[t._v("在某些上下文中，对象必须表示为一个原始值")]),t._v("，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里必须是字符串或者数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里必须是数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里必须是字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里必须是字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里必须是数字")]),t._v("\n")])])]),a("p",[t._v("此时，要求对象可以隐式转换为一个原始值，要么是数字，要么是字符串，之后再进行实际的操作。")]),t._v(" "),a("p",[t._v("具体的转换规则如下：")]),t._v(" "),a("p",[t._v("1）如果对象当初定义了 "),a("code",[t._v("[Symbol.toPrimitive]")]),t._v(" 方法，则按照那个方法进行转换")]),t._v(" "),a("p",[t._v("2）否则，判断当前上下文中对象应该转换为字符串还是数字")]),t._v(" "),a("p",[t._v("3）如果明确必须转换为字符串，则优先调用对象的 "),a("code",[t._v("toString")]),t._v(" 方法，若该方法没有返回原始值，则继续调用 "),a("code",[t._v("valueOf")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("4）如果明确必须转换为数字，或者不明确应该转换为什么，则优先调用对象的 "),a("code",[t._v("valueOf")]),t._v(" 方法，若该方法没有返回原始值，则继续调用 "),a("code",[t._v("toString")]),t._v(" 方法")]),t._v(" "),a("h3",{attrs:{id:"_3-的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-的规则"}},[t._v("#")]),t._v(" 3）"),a("code",[t._v("+")]),t._v(" 的规则")]),t._v(" "),a("p",[t._v("最后我们再来总结一下 "),a("code",[t._v("+")]),t._v(" 的规则。其实关键在于，正确地判断 "),a("code",[t._v("+")]),t._v(" 是加号还是拼接符号。")]),t._v(" "),a("p",[t._v("1）如果操作数中有对象，先进行拆箱操作、得到一个原始值再说")]),t._v(" "),a("p",[t._v("2）如果操作数中有一个是字符串，则认为 "),a("code",[t._v("+")]),t._v(" 是拼接符号，会把另一个也转化为字符串并进行拼接")]),t._v(" "),a("p",[t._v("3）其它情况下，认为 "),a("code",[t._v("+")]),t._v(" 是加号，意味着两个操作数会转化为数字并相加")])])}),[],!1,null,null,null);s.default=e.exports}}]);