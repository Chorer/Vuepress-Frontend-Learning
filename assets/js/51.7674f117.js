(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{590:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("p",[t._v("基本数据（原始数据）类型有 6 种：Null、Undefined、String、Number、Boolean、Symbol")])]),t._v(" "),a("li",[a("p",[t._v("引用数据类型有 2 种： Object（包含了对象字面量、包装类型、数组、Date、Error、RegExp、Math、Set、Map 等）、Function")])])]),t._v(" "),a("p",[t._v("下面是部分数据类型的注意要点。")]),t._v(" "),a("h2",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" Number 类型")]),t._v(" "),a("h3",{attrs:{id:"关于-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-nan"}},[t._v("#")]),t._v(" 关于 NaN")]),t._v(" "),a("p",[t._v("NaN 是一种特殊的数字，本身也属于 number 类型，它的含义是“非数值”。涉及 NaN 的算术操作都返回 NaN，并且 NaN 不等于任何东西，甚至不等于 NaN（因为世界上的“非数值”很多，两个“非数值”可以不是同一个“非数值”）。如何检测 NaN 呢？有两个方法。")]),t._v(" "),a("p",[a("code",[t._v("isNaN()")]),t._v(" 会进行类型转换，看参数是否可以转化为数值，任何不能转化为数值的参数都被认为是“非数值”，并返回 true")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("如果传进来的是对象，首先会调用 "),a("code",[t._v("valueOf()")]),t._v(" 看是否可以转化为数值，如果不行，再看 "),a("code",[t._v("toString()")]),t._v(" 是否可以转化为数值，如果也不行，则返回 true。")]),t._v(" "),a("p",[a("code",[t._v("Number.isNaN")]),t._v(" 是 "),a("code",[t._v("isNaN")]),t._v(" 的加强版，它实际上更符合我们的直觉，所做的事情很简单，就是判断参数是不是 "),a("code",[t._v("NaN")]),t._v(" 这个东西，是就返回 true")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false   因为传进去的是字符串，不是 NaN")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true    因为传进去的确实就是 NaN")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true    因为传进去的 'a'-'b' 的运算结果确实就是 NaN")]),t._v("\n")])])]),a("h3",{attrs:{id:"关于转型函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于转型函数"}},[t._v("#")]),t._v(" 关于转型函数")]),t._v(" "),a("p",[a("code",[t._v("Number()")]),t._v(" 可以将参数转化为数值：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    会移除小数点后的 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'    12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    带有空格，不影响")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN   无法转化为数字  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcde'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN   无法转化为数字 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN   注意不是返回 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 0     传入对象，则先调用 valueOf，发现返回了自身，于是接着调用 toString，返回""，因此转化为 0')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// NaN   传入对象，则先调用 valueOf，发现返回了自身，于是接着调用 toString，返回"[object Object]"，无法被转化为数字')]),t._v("\n")])])]),a("p",[a("code",[t._v("parseFloat()")]),t._v(" 可以将参数转化为浮点数：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    不会添加小数点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    会移除小数点后的 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' 12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    带有空格，不影响")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12    截取数字部分")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN   无法转化为数字")]),t._v("\n")])])]),a("p",[t._v("PS：对于布尔值、对象、数组、undefined、null，空字符串，均返回 NaN")]),t._v(" "),a("p",[a("code",[t._v("parseInt()")]),t._v(" 可以将参数转化为整数：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' 12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12   带有空格，不影响 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12   截取数字部分")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN  无法转化为数字")]),t._v("\n")])])]),a("p",[t._v("PS：对于布尔值、对象、数组、undefined、null，空字符串，均返回 NaN")]),t._v(" "),a("blockquote",[a("p",[t._v("总结一下，三个转型函数都可以无视参数前面的空格，Number 会尽量将整个参数转化为数字，而 parseInt 和 parseFloat 则更多是解析参数的数字部分，且比较严格，很多值无法转化为数字")])]),t._v(" "),a("h2",{attrs:{id:"symbol-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型"}},[t._v("#")]),t._v(" Symbol 类型")]),t._v(" "),a("h3",{attrs:{id:"用途一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途一"}},[t._v("#")]),t._v(" 用途一")]),t._v(" "),a("p",[t._v("Symbol 的第一个用法是创建唯一的记号，通常作为对象的属性名，可以防止属性冲突的问题。几个要点：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("即使传入相同的参数，也是不同的 Symbol 实例。"),a("code",[t._v("Symbol('a') != Symbol('a')")])])]),t._v(" "),a("li",[a("p",[t._v("Symbol 不存在字面量形式，创建 Symbol 实例的方法只有两种：一种是 "),a("code",[t._v("Symbol('a')")]),t._v("（注意不能使用 new）；另一种是 "),a("code",[t._v("Symbol.for('a')")]),t._v("，这种方式创建的 Symbol 实例会放在全局符号注册表中，下次再调用 "),a("code",[t._v("Symbol.for('a')")]),t._v(" 的时候会直接重用之前已经创建好的 Symbol 实例 —— 意思是 "),a("code",[t._v("Symbol.for('a') === Symbol.for('a')")]),t._v("。")])])]),t._v(" "),a("h3",{attrs:{id:"用途二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途二"}},[t._v("#")]),t._v(" 用途二")]),t._v(" "),a("p",[t._v("第二个用法是提供了一些内置的 Symbol 属性名，比如 "),a("code",[t._v("Symbol.hasInstance")]),t._v("、"),a("code",[t._v("Symbol.toPrimitive")]),t._v(" 等，从而暴露内部行为，方便开发者进行自定义。")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("Symbol.hasInstance")]),t._v("：这个方法挂载在 Function 原型上，也即 "),a("code",[t._v("Function.prototype[Symbol.hasInstance]")]),t._v("，在调用 "),a("code",[t._v("instanceof")]),t._v(" 的时候，实际上构造函数会通过原型调用这个方法：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfn "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\nFn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("我们可以给构造函数自定义一个同名静态方法，从而遮蔽原型方法，自定义调用 "),a("code",[t._v("insatnceof")]),t._v(" 时的返回值：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfn "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nFn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Symbol.toPrimitive")]),t._v("：这个方法直接挂载在实例对象上，也即 "),a("code",[t._v("obj[Symbol.toPrimitive]")]),t._v("，每当当前上下文的对象必须以原始值表示的时候，都会首先尝试调用对象的这个方法。比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  hint 代表对象在当前上下文应该表示为哪种类型的原始值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("    \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的对象应该作为数字表示，所以 obj 转换为 3")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                 \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的对象应该作为字符串表示，所以 obj 转换为 ‘fn’")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的对象应该作为字符串表示，所以 obj 转换为 ‘fn’")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不知道是加法（3）还是字符串拼接（'fn'），所以 obj 转换为 'default'")]),t._v("\nobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                 \n")])])])])]),t._v(" "),a("h2",{attrs:{id:"object-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型"}},[t._v("#")]),t._v(" Object 类型")]),t._v(" "),a("p",[t._v("Object 除了通常所说的对象，还包括了函数和数组。")]),t._v(" "),a("h3",{attrs:{id:"object-属性访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-属性访问"}},[t._v("#")]),t._v(" Object 属性访问")]),t._v(" "),a("p",[t._v("以下方法定义或者修改属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.defineProperty(obj,'a',{})")]),t._v("：定义或者修改一个属性。与直接 "),a("code",[t._v("obj.a=1")]),t._v("不同的是，属性默认不可枚举")]),t._v(" "),a("li",[a("code",[t._v("Object.defineProperties(obj,{})")]),t._v("：定义或者修改多个属性")])]),t._v(" "),a("p",[t._v("以下方法获取属性：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Object.keys()")]),t._v("：获取所有可枚举的实例属性，无法获取符号属性（配套的有 "),a("code",[t._v("Object.values")]),t._v(" 和 "),a("code",[t._v("Object.entries")]),t._v("）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("for(key in obj)")]),t._v("：获取所有可枚举的实例属性 + 原型属性，无法获取符号属性")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Object.getOwnPropertyNames")]),t._v("：获取所有的实例普通属性")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Object.getOwnProertySymbols")]),t._v("：获取所有的实例符号属性")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Reflect.ownKeys()")]),t._v("：获取所有的实例属性（无论是否可以枚举，无论是不是符号属性）")])])]),t._v(" "),a("p",[t._v("以下方法获取属性的特性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.getOwnPropertyDescriptor(obj,a)")]),t._v("：获取某个实例属性的特性描述对象")]),t._v(" "),a("li",[a("code",[t._v("Object.getOwnPropertyDescriptors(obj)")]),t._v("：获取所有实例属性的特性描述对象")])]),t._v(" "),a("p",[t._v("以下方法判断是否存在属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("obj.hasOwnProperty('a')")]),t._v("：判断实例本身是否存在某个属性")]),t._v(" "),a("li",[a("code",[t._v("a in obj")]),t._v("：判断实例或者其原型上是否存在某个属性")])]),t._v(" "),a("p",[t._v("以下方法判断属性是否可枚举：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("obj.propertyIsEnumerable('a')")]),t._v("：判断实例属性是否可枚举")])]),t._v(" "),a("h3",{attrs:{id:"valueof-和-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof-和-tostring"}},[t._v("#")]),t._v(" valueOf() 和 toString()")]),t._v(" "),a("p",[a("code",[t._v("valueOf()")]),t._v(" ：")]),t._v(" "),a("p",[t._v("当通过基本类型的装箱对象（比如 new Number、new Boolean、new String）调用的时候，返回结果是对应的字符串、数值或者布尔值；当通过非装箱对象（比如对象字面量、new Object）调用的时候，返回结果是对象本身")]),t._v(" "),a("p",[a("code",[t._v("toString()")]),t._v("：")]),t._v(" "),a("p",[t._v("当通过基本类型的装箱对象调用的时候，返回结果是对应的字符串、数值或者布尔值的"),a("strong",[t._v("字符串表示")]),t._v("；当通过非装箱对象调用的时候，则使用 Object 原型上的方法，返回结果是 "),a("code",[t._v('"[object Object]"')]),t._v("。")]),t._v(" "),a("p",[t._v("**PS：**如果对象是数组，则使用 Array 原型上的方法，对于空数组返回 "),a("code",[t._v('""')]),t._v("；对于非空数组，会针对每个元素调用一次 "),a("code",[t._v("toString()")]),t._v("，并将结果字符串通过逗号连接起来，比如 "),a("code",[t._v("[1,2].toString()")]),t._v(" 返回 "),a("code",[t._v('"1,2"')]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" Boolean 类型")]),t._v(" "),a("p",[t._v("下面的值属于假值（falsy value），经过 Boolean 转型函数后得到 false：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("   document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v('""')]),t._v("是假值，"),a("code",[t._v('" "')]),t._v("不是假值。后者本质上代表的是一个空格字符，它是有实体的")]),t._v(" "),a("li",[t._v("空数组和空对象不是假值。它们虽然是“空的”，但是都是一个有效的对象，是有实体的")])])])}),[],!1,null,null,null);s.default=e.exports}}]);