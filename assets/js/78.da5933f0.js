(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{617:function(t,e,a){"use strict";a.r(e);var s=a(12),c=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"短轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短轮询"}},[t._v("#")]),t._v(" 短轮询")]),t._v(" "),a("p",[t._v("基于 http 协议。短轮询指的是，浏览器不断向服务器发送请求，服务器不管有没有数据要发送，都需要返回响应过去。当这种请求发出的频率足够高的时候，就可以模拟实现实时通信的效果。但短轮询的问题在于，实际上轮询的频率很难控制，如果频率太低，则数据更新有延迟，实时通信效果差；如果频率太高，则其中会有很多无效的请求，对资源是一种浪费。")]),t._v(" "),a("h2",{attrs:{id:"长轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长轮询"}},[t._v("#")]),t._v(" 长轮询")]),t._v(" "),a("p",[t._v("基于 http 协议。长轮询和短轮询最大的区别在于，浏览器向服务器发送请求之后，服务器目前如果没有数据需要返回，那么可以先 hold 住连接、不断开，等到后面有数据的时候再返回给浏览器。所以长轮询避免了浏览器需要频繁地发送请求，但保持连接不断开对服务器会有一定的性能影响")]),t._v(" "),a("h2",{attrs:{id:"sse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sse"}},[t._v("#")]),t._v(" SSE")]),t._v(" "),a("p",[t._v("基于 http 协议。SSE 就是 server-sent event，它的特点是服务端单向推送数据。浏览器第一次发送请求给服务器之后，服务器会返回一个 "),a("code",[t._v("content-type: text/event-stream")]),t._v(" 的头部字段，表示自己后续想要发送的不是单个数据包，而是源源不断的数据流，那么浏览器这边就会和服务器建立一个长连接，以后数据一旦有更新，无需再由浏览器发起请求，只需要由服务器这边直接返回给浏览器即可。")]),t._v(" "),a("p",[t._v("根据 SSE 的特点，它很适合用来实现流数据的推送，比如视频播放，未读消息等。")]),t._v(" "),a("p",[t._v("SSE 是基于 http 的，因此无需做过多的改造，但缺点就是它只是单向通信，只能由服务器推送数据给浏览器，如果浏览器想要发送请求给服务器，那么它无法复用当前的这个连接，必须重开一个连接发送请求。")]),t._v(" "),a("h2",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么需要 WebSocket")])]),t._v(" "),a("p",[t._v("通信方式分为三种：单工通信，表示数据永远只能单向传输；半双工通信，表示数据可以双向传输，但是不能同时双向传输，典型的如 http，只能是一方请求之后另一方响应；全双工通信，表示数据可以同时双向传输，典型的如 WebSocket。")]),t._v(" "),a("p",[t._v("WebSocket 也是应用层的协议，对标的是 http。与 http 不同的是，它采用的是全双工通信。以前实现实时通信需要依靠轮询，也就是客户端不断发送请求询问服务端是否有数据要发送。当轮询的频率足够高的时候，就可以近似模拟实时通信的效果，但是无用的轮询请求过多，太消耗流量了。WebSocket 解决了这问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("如何建立 WebSocket 连接")])]),t._v(" "),a("p",[t._v("WebSocket 只需要一次握手即可建立连接，握手过程见下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20181115005750382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FuX2FwZQ==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("在原有 http 连接的基础上，如果客户端想要升级成 WebSocket 协议，那么可以发送一个携带如下头部字段的请求：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Connection: upgrade\nUpgrade: websocket\nSec-WebSocket-Key: xxxxxxxx\n")])])]),a("p",[t._v("服务端收到后提取出 Sec-WebSocket-Key，对其进行加工，再进行哈希计算，从而得到 Sec-WebSocket-Accept，返回如下响应（状态码为 101，表示升级协议）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Connection: upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: xxxxxxxx\n")])])]),a("p",[t._v("客户端这边对 Sec-WebSocket-Accept 进行验证，以确认对面确实是目标服务器。之后双方可以正常进行通信。")])])}),[],!1,null,null,null);e.default=c.exports}}]);