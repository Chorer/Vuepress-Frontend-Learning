(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{620:function(t,a,s){"use strict";s.r(a);var e=s(12),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"跨域和跨站的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域和跨站的区别"}},[t._v("#")]),t._v(" 跨域和跨站的区别")]),t._v(" "),s("p",[t._v("涉及到 Web 安全，会有一个跨站的概念，跨站和跨域是不同的。")]),t._v(" "),s("h3",{attrs:{id:"跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),s("p",[t._v("跨域即 cross-domain，它和同源（same-origin）相对，要求两个 URL 的协议、端口号、域名都一致才能称为同源。")]),t._v(" "),s("blockquote",[s("p",[t._v("如何判断是否跨域？")])]),t._v(" "),s("p",[t._v("判断是否跨域很简单，只需要判断两个 URL 的协议、端口、域名是否完全一致即可。")]),t._v(" "),s("h3",{attrs:{id:"跨站"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨站"}},[t._v("#")]),t._v(" 跨站")]),t._v(" "),s("p",[t._v("跨站即 cross-site，它和同站（same-site）相对，对协议和端口号无要求，只要两个 URL 的 "),s("code",[t._v("eTLD + 1")]),t._v(" 一致，就能称为同站。那么什么是 "),s("code",[t._v("eTLD")]),t._v(" 呢？")]),t._v(" "),s("p",[s("code",[t._v("eTLD")]),t._v(" 即 effective top level domain，有效顶级域名，比如 "),s("code",[t._v("http://juejin.cn")]),t._v("  的 "),s("code",[t._v("eTLD")]),t._v(" 是 "),s("code",[t._v(".cn")]),t._v("，"),s("code",[t._v("http://test.org")]),t._v(" 的 "),s("code",[t._v("eTLD")]),t._v(" 是 "),s("code",[t._v(".org")]),t._v("，而 "),s("code",[t._v("http://chorer.github.io")]),t._v(" 则是 "),s("code",[t._v("github.io")]),t._v("（注意不是 "),s("code",[t._v(".io")]),t._v("）。而 "),s("code",[t._v("eTLD + 1")]),t._v("  指的是有效顶级域名 + 二级域名，比如对于 "),s("code",[t._v("http://juejin.cn")]),t._v(" 来说就是 "),s("code",[t._v("juejin.cn")]),t._v("，对于 "),s("code",[t._v("http://test.org")]),t._v(" 来说就是 "),s("code",[t._v("test.org")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("PS：")]),t._v(" 不过需要注意的是，same-site 实际上也分为两种，一种是上面定义的协议松散型 same-site，即 scheme-less same-site，在判断是否同站时并不需要考虑协议；另一种则是协议严格型 same-site，即 schemeful same-site，要求协议必须一致才能认定为是同站。")]),t._v(" "),s("blockquote",[s("p",[t._v("如何判断是否跨站？")])]),t._v(" "),s("p",[t._v("判断是否跨站并没有那么简单，对于给定的一个 URL，其实我们有时候是很难直接看出它的 eTLD 的。Mozilla 维护了一个公共后缀列表，里面存放了超过 9000 条 eTLD，有时候需要对照这个表才能查找 eTLD。")]),t._v(" "),s("h2",{attrs:{id:"xss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),s("p",[t._v("XSS 即 Cross-Site Scripting（跨站脚本攻击），指的是黑客将恶意代码注入页面中，只要打开页面，代码就会执行。XSS 攻击可能导致 Cookie 被窃取、个人信息泄露、劫持流量实现恶意跳转等。")]),t._v(" "),s("h3",{attrs:{id:"分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),s("p",[t._v("XSS 基本可以分为两类，一个是反射型 XSS（非持久型 XSS），一个是存储型 XSS（持久型 XSS）。")]),t._v(" "),s("p",[s("strong",[t._v("反射型 XSS")])]),t._v(" "),s("p",[t._v("黑客诱导用户点击带有特殊参数的 URL，从而往页面中注入恶意代码。比如说，正常向服务器发起请求的 URL 是 "),s("code",[t._v("http://test.com?name=jack")]),t._v("，服务器拿到参数 "),s("code",[t._v("jack")]),t._v(" 之后，不做处理，直接返回一个响应 "),s("code",[t._v("Hello jack")]),t._v("，HTML 是这样的：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello jack"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这样当然没问题，但如果用户点击了黑客的 URL 是 "),s("code",[t._v("http://test.com?name=<script>alert(1)<\/script>")]),t._v("，那么服务器拿到了 "),s("code",[t._v("name")]),t._v(" 参数，如果不做处理就返回响应，HTML 会是这样的：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("那么解析 HTML 的时候，实际上是会执行中间这段脚本的。"),s("code",[t._v("alert(1)")]),t._v(" 只是一个示例 —— 这里可以是任何的脚本操作，包括通过 "),s("code",[t._v("document.cookie")]),t._v(" 窃取用户 Cookie，通过 "),s("code",[t._v("window.location")]),t._v(" 实现跳转等，会有很大的安全风险。")]),t._v(" "),s("p",[s("strong",[t._v("存储型 XSS")])]),t._v(" "),s("p",[t._v("存储型 XSS 是持久的，而且风险会更大，因为恶意代码会存储到数据库中，无论哪个用户访问页面，都会被波及。比如说，黑客给某篇文章的评论区留言，写下 "),s("code",[t._v("<script>alert(1)<\/script>")]),t._v("，之后提交表单给服务器。服务器不做任何处理，只是把留言存储到数据库中。下次无论哪位用户访问这篇文章，服务器都会从数据库中获取留言并返回给浏览器，这当然也包括了 "),s("code",[t._v("<script>alert(1)<\/script>")]),t._v(" ，只要一执行就会产生弹窗，对于所有用户都是如此。同样，这里弹窗只是一个举例，它可以是任何危害到用户信息安全的脚本操作。")]),t._v(" "),s("h3",{attrs:{id:"防御措施"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御措施"}},[t._v("#")]),t._v(" 防御措施")]),t._v(" "),s("p",[s("strong",[t._v("1）HTML 转义")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("<")]),t._v(" 用于定义标签的开始，如果我们希望浏览器确实显示 "),s("code",[t._v("<")]),t._v(" 这个字符本身，而不是把它当作一个标签去解析，那么就必须对字符进行转义（escape），编写字符实体而不是字符。")])]),t._v(" "),s("p",[t._v("同理，为了安全起见，我们不应该把 "),s("code",[t._v("<script>alert(1)<\/script>")]),t._v(" 作为标签去解析，而只是希望它是一个单纯的字符串，所以可以考虑在服务端这边进行 HTML 转义：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token entity named-entity",title:"<"}},[t._v("&lt;")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token entity named-entity",title:">"}},[t._v("&gt;")]),t._v("alert(1)"),s("span",{pre:!0,attrs:{class:"token entity named-entity",title:"<"}},[t._v("&lt;")]),t._v("/script"),s("span",{pre:!0,attrs:{class:"token entity named-entity",title:">"}},[t._v("&gt;")]),t._v("\n")])])]),s("p",[t._v("这个转义的结果最终返回给浏览器， "),s("code",[t._v("<script>alert(1)<\/script>")]),t._v(" 会作为字符串在页面上显示出来，而不再是可执行的脚本。")]),t._v(" "),s("p",[s("strong",[t._v("2）用户输入验证")])]),t._v(" "),s("p",[t._v("转义指的是对 "),s("code",[t._v("<")]),t._v("、"),s("code",[t._v(">")]),t._v("等特殊字符进行转义，如果说注入的恶意脚本都是用 "),s("code",[t._v("<script><\/script>")]),t._v("包裹的，那么 HTML 转义确实可以避免 XSS 攻击 —— 但实际上，有其他的方式可以进行脚本注入。比如某社区网站允许用户在个人资料中填写自己博客的地址，并最终作为 "),s("code",[t._v('<a href="xxx">我的博客地址</a>')]),t._v("展示出来，那么别有用心的黑客就可以填入 "),s("code",[t._v("javascript:alert(1);")]),t._v("，这是不会经过 HTML 转义的，因此最终黑客的博客地址是这样的：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("javascript:alert(1);"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("这是用户博客的地址"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("只要有人点击查看他资料中的博客地址，就会发生弹窗。")]),t._v(" "),s("p",[t._v("同样的，如果网站还允许用户通过填写 URL 的方式设置头像图片，并最终作为 "),s("code",[t._v('<img src="xxx">')]),t._v(" 展示出来，那么黑客可以填入 "),s("code",[t._v('xxx" onerror="alert(1)')]),t._v("，这同样是不会经过 HTML 转义的，因此最终 "),s("code",[t._v("img")]),t._v(" 标签是这样的：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token special-attr"}},[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onerror")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token value javascript language-javascript"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这里的 "),s("code",[t._v("src")]),t._v(" 明显是不合法的，所以会触发 "),s("code",[t._v("error")]),t._v(" 事件，发生弹窗。")]),t._v(" "),s("p",[t._v("因此，单纯的 HTML 转义并不能规避所有 XSS 攻击，我们还必须对用户输入的数据进行验证。")]),t._v(" "),s("p",[s("strong",[t._v("3）CSP")])]),t._v(" "),s("p",[t._v("CSP 即 Content  Security Policy（内容安全策略），开发者提供一个白名单，告诉浏览器只能加载特定来源的代码，从而禁止某些第三方脚本的运行。")]),t._v(" "),s("p",[t._v("CSP 有两种使用方式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("服务端响应一个 "),s("code",[t._v("content-security-policy")]),t._v(" 头部字段，约束浏览器的加载行为：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("Content-Security-Policy: script-src 'self'; style-src cdn.example.org third-party.org; child-src https:\n")])])])]),t._v(" "),s("li",[s("p",[t._v("HTML 中使用 "),s("code",[t._v("meta")]),t._v(" 标签，约束浏览器的加载行为：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Content-Security-Policy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script-src "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("; style-src cdn.example.org third-party.org; child-src https:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("它们的形式不同，但作用都是一样的：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("script-src")]),t._v("：设置只允许加载哪些来源的脚本，设置为 "),s("code",[t._v("self")]),t._v(" 代表只能加载本域名的脚本。注意它会禁止内联脚本的事件监听，比如前面例子的 "),s("code",[t._v("onerror")]),t._v("，使用的时候会报错提示违反了 CSP")]),t._v(" "),s("li",[s("code",[t._v("style-src")]),t._v("：设置只允许加载哪些来源的样式文件，这里只能加载 "),s("code",[t._v("cdn.example.org")]),t._v(" 和 "),s("code",[t._v("third-party.org")]),t._v("的")]),t._v(" "),s("li",[s("code",[t._v("child-src")]),t._v("：设置为 "),s("code",[t._v("https")]),t._v(" 表示必须使用 "),s("code",[t._v("https")]),t._v(" 去加载 "),s("code",[t._v("iframe")])])])])]),t._v(" "),s("p",[s("strong",[t._v("4）HttpOnly")])]),t._v(" "),s("p",[t._v("前面说过，黑客可以注入脚本窃取用户的 Cookie，这本质上是因为可以通过 "),s("code",[t._v("document.cookie")]),t._v(" 去访问 Cookie，因此服务端可以在给客户端响应的 "),s("code",[t._v("Set-Cookie")]),t._v(" 头部字段，声明一个 "),s("code",[t._v("HttpOnly")]),t._v(" 来禁止通过脚本获取 Cookie。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Set"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a3fWa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Expires"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Wed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" Oct "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2015")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("07")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Secure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" HttpOnly\n")])])]),s("p",[s("strong",[t._v("5）Sanitizer API")])]),t._v(" "),s("p",[t._v("Sanitizer API 是各大浏览器正在实现的一个原生 API。传统的转义方式存在一个缺点，那就是对于任意的 "),s("code",[t._v("<")]),t._v(" 和 "),s("code",[t._v(">")]),t._v(" 都会进行转义，比如：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("em")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("这里要作为标签渲染"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("em")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token special-attr"}},[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onerror")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token value javascript language-javascript"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这里其实只想要对 img 标签进行转义，因为其错误的路径会触发执行恶意脚本，但对于 em 标签，我们希望它正常作为标签去渲染。如果采用转义的方式，则 em 标签无法被渲染。")]),t._v(" "),s("p",[t._v("所以 Sanitizer API 的思路是，对用户输入的字符串进行解析，并消除其中涉及到脚本执行的部分：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sanitizer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sanitizer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user_input "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('<em>这里要作为标签渲染</em><img src = "xxx" onerror="alert(1)">')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\nsanitizer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sanitizeFor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("user_input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理后的用户输入如下，脚本部分被消除了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <em>这里要作为标签渲染</em><img src = "xxx">')]),t._v("\n")])])]),s("p",[t._v("此外，Sanitizer API 本身提供了丰富的配置，可以定制更具体的消除规则。")]),t._v(" "),s("p",[t._v("PS：目前 Sanitizer API 兼容性还很差，即使 Chrome 也只是一个实验特性，不过可以使用 DOMPurify 这样的库作为替代方案。")]),t._v(" "),s("h2",{attrs:{id:"csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),s("h3",{attrs:{id:"案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),s("p",[t._v("CSRF 即跨站请求伪造，黑客利用请求会携带 Cookie 的特点，冒充用户身份向正常网站发出请求，执行某些非法操作。它的作用过程大概是这样的：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("用户登录 "),s("code",[t._v("http://article.com")]),t._v("，服务器验证通过，返回 Cookie 给浏览器保存")])]),t._v(" "),s("li",[s("p",[t._v("假设 Cookie 没过期，这期间黑客诱导用户访问恶意网站 "),s("code",[t._v("http://evil.com")]),t._v("，这个网站中有这么一段代码：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://article/delete?id=1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("那么恶意网站就会向 "),s("code",[t._v("http://article.com")]),t._v(" 发起一个携带 Cookie 的请求，服务端这边验证没问题，就会把 id 为 1 的文章给删除了")])])]),t._v(" "),s("p",[t._v("这里黑客之所以可以发起 CSRF 攻击，有下面几个原因：")]),t._v(" "),s("ul",[s("li",[t._v("用户：登录了正常网站且没有登出（Cookie 有效），之后访问了恶意网站")]),t._v(" "),s("li",[t._v("黑客：知道执行请求的 URL 和所有的参数")]),t._v(" "),s("li",[t._v("服务端：只使用 Cookie 进行权限验证，没有任何针对 CSRF 的防御措施")]),t._v(" "),s("li",[s("code",[t._v("img")]),t._v(" 是支持跨域请求的。其实黑客也可以直接发送一个 AJAX 请求，不过由于同源策略和 CORS 的限制，"),s("code",[t._v("http://evil.com")]),t._v(" 是无法向不同源的 "),s("code",[t._v("http://article.com")]),t._v(" 发送请求的，所以黑客使用的是天然可以跨域的 "),s("code",[t._v("img")]),t._v(" 标签")])]),t._v(" "),s("h3",{attrs:{id:"xss-csrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss-csrf"}},[t._v("#")]),t._v(" XSS + CSRF")]),t._v(" "),s("p",[t._v("上面的例子属于利用 Cookie 而不是窃取 Cookie，实际上，黑客可以先使用 XSS 拿到用户的 Cookie，接着再使用 CSRF 伪造发送请求。")]),t._v(" "),s("h3",{attrs:{id:"防御措施-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御措施-2"}},[t._v("#")]),t._v(" 防御措施")]),t._v(" "),s("p",[t._v("要制定防御措施，可以从 CSRF 产生的原因入手：")]),t._v(" "),s("ul",[s("li",[t._v("CSRF 大多来自第三方网站，若服务端能知道请求是谁发出的，并相应进行限制，那么可以在一定程度上规避攻击。与此相关的有 "),s("code",[t._v("SameSite")]),t._v(" 属性、"),s("code",[t._v("Origin")]),t._v(" 头部字段、"),s("code",[t._v("Referer")]),t._v(" 头部字段")]),t._v(" "),s("li",[t._v("CSRF 发生的关键在于第三方网站也能携带 Cookie 发送请求，导致服务端并不知道请求来自恶意网站还是正常用户。那么，我们可以让正常用户发送请求时携带一个恶意网站无法获取到的 token，服务端通过校验请求是否携带正确的 token，来把正常的请求和攻击的请求区分开，也可以防范 CSRF 攻击。与此相关的就是 "),s("code",[t._v("CSRF token")]),t._v("。")])]),t._v(" "),s("p",[s("strong",[t._v("同站限制 —— SameSite")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("==第一方 Cookie==：在 "),s("code",[t._v("http://bank.com")]),t._v(" 下对 "),s("code",[t._v("http://bank.com/xxx")]),t._v(" 发起请求，那么携带的 Cookie 是第一方 Cookie（由第一方携带的）；")]),t._v(" "),s("li",[t._v("==第三方 Cookie==：在 "),s("code",[t._v("http://evil.com")]),t._v(" 下对 "),s("code",[t._v("http://bank.com/xxx")]),t._v(" 发起请求，携带的则是第三方 Cookie（由第三方携带的）。")])])]),t._v(" "),s("p",[t._v("如果站点当初响应返回的 "),s("code",[t._v("Set-Cookie")]),t._v(" 声明了非 none 的 "),s("code",[t._v("SameSite")]),t._v(" 属性，那么该 Cookie 就会成为一个同站 Cookie，同站 Cookie 只会在同站请求之间携带，无法作为第三方 Cookie —— 换句话说，声明非 none 的 "),s("code",[t._v("SameSite")]),t._v(" 可以避免在 "),s("code",[t._v("http://evil.com")]),t._v(" 下对 "),s("code",[t._v("http://bank.com/xxx")]),t._v(" 发起请求时携带 Cookie 过去，因此可以规避 CSRF 攻击。")]),t._v(" "),s("p",[t._v("1）"),s("code",[t._v("Set-Cookie: SameSite = Strict")]),t._v("：")]),t._v(" "),s("p",[t._v("这是最严格的模式，声明之后 Cookie 将不会在任何跨站请求中携带，也即完全禁用了第三方 Cookie，因此可以完全阻止 CSRF 攻击。但缺点是用户体验比较差：比如正常情况下，当前网页有一个跳转到目标网站的链接，点击进入后往往应该是登录状态，这是因为当前网页向目标网站发起的请求中携带了目标网站的 Cookie —— 而现在如果彻底禁用第三方 Cookie，就无法维持这个登录状态了，进入目标网站后需要重新登录。")]),t._v(" "),s("p",[t._v("2）"),s("code",[t._v("Set-Cookie: SameSite = Lax")]),t._v("：")]),t._v(" "),s("p",[t._v("Chrome80 之后采用的默认值。这种模式相对来说比较宽松，声明之后 Cookie 在大多数跨站请求的场景下仍然不会携带，因此保证了安全性；同时，"),s("strong",[t._v("导航到目标网站的 GET 请求")]),t._v("（所谓的“顶级导航”，会引起地址栏 url 的改变）是可以携带 Cookie 的，因此保证了可用性（比如说维持登录态）。具体情况如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("请求类型")]),t._v(" "),s("th",[t._v("示例")]),t._v(" "),s("th",[t._v("正常情况")]),t._v(" "),s("th",[t._v("Lax")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("链接")]),t._v(" "),s("td",[s("code",[t._v('<a href="..."></a>')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("发送 Cookie")])]),t._v(" "),s("tr",[s("td",[t._v("预加载")]),t._v(" "),s("td",[s("code",[t._v('<link rel="prerender" href="..."/>')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("发送 Cookie")])]),t._v(" "),s("tr",[s("td",[t._v("GET 表单")]),t._v(" "),s("td",[s("code",[t._v('<form method="GET" action="...">')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("发送 Cookie")])]),t._v(" "),s("tr",[s("td",[t._v("POST 表单")]),t._v(" "),s("td",[s("code",[t._v('<form method="POST" action="...">')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("不发送")])]),t._v(" "),s("tr",[s("td",[t._v("iframe")]),t._v(" "),s("td",[s("code",[t._v('<iframe src="..."></iframe>')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("不发送")])]),t._v(" "),s("tr",[s("td",[t._v("AJAX")]),t._v(" "),s("td",[s("code",[t._v('$.get("...")')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("不发送")])]),t._v(" "),s("tr",[s("td",[t._v("Image")]),t._v(" "),s("td",[s("code",[t._v('<img src="...">')])]),t._v(" "),s("td",[t._v("发送 Cookie")]),t._v(" "),s("td",[t._v("不发送")])])])]),t._v(" "),s("p",[t._v("表格的前三种都属于导航到目标网站的 GET 请求，这些请求虽然跨站但是可以携带 Cookie —— 尤其是第一种情况，允许我们通过外链到达目标网站后直接处于登录状态。")]),t._v(" "),s("p",[t._v("3）"),s("code",[t._v("Set-Cookie: SameSite = None; Secure")])]),t._v(" "),s("p",[t._v("Chrome80 之前采用的默认值。这种模式可以关闭 "),s("code",[t._v("SameSite")]),t._v(" 属性，不管是同站请求还是跨站请求，都会携带 Cookie。但与此同时，必须声明 "),s("code",[t._v("Secure")]),t._v("，让 Cookie 只能在 HTTPS 请求中携带。")]),t._v(" "),s("blockquote",[s("p",[t._v("PS：Chrome 将在 2022 年全面禁用第三方 Cookie")])]),t._v(" "),s("p",[s("strong",[t._v("同源检测 —— "),s("code",[t._v("Origin")]),t._v(" 和 "),s("code",[t._v("Referer")])])]),t._v(" "),s("p",[t._v("服务端收到请求后，通常可以从请求报文的 "),s("code",[t._v("Origin")]),t._v(" 或者 "),s("code",[t._v("Referer")]),t._v(" 头部字段知道请求源，区别在于:")]),t._v(" "),s("p",[t._v("出于安全考虑，有时候请求源并不希望把详细路径暴露给服务器，因此"),s("code",[t._v("Origin")]),t._v(" 只给出域名信息：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://developer.mozilla.org'")]),t._v("\n")])])]),s("p",[t._v("而 "),s("code",[t._v("Referer")]),t._v(" 除了给出域名信息，还会给出具体路径：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Referer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://developer.mozilla.org/en-US/docs/Web/JavaScript'")]),t._v("\n")])])]),s("p",[t._v("那么应该用哪一个呢？"),s("code",[t._v("Origin")]),t._v(" 在 IE11 的 CORS 请求中不会携带，在 302 重定向的请求中也不会携带，所以更保险的是使用 "),s("code",[t._v("Referer")]),t._v(" —— 但即便如此也要知道，在 HTTPS 页面跳转到 HTTP 页面的时候，出于安全考虑，不会携带 "),s("code",[t._v("Referer")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[t._v("CSRF token")])]),t._v(" "),s("p",[t._v("恶意网站进行 CSRF 攻击的一个必要条件是知道请求格式和参数，那么，如果让请求必须携带一个只有正常用户才知道的 token 作为参数，恶意网站就无法构造完整的请求了，也就无法进行攻击。")]),t._v(" "),s("blockquote",[s("p",[t._v("模式一：隐藏表单域 + session")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("服务端生成一个随机的 CSRF token，存储在服务器的 session 中，同时下发 token 到用户的前端页面中。这里有两种情况")]),t._v(" "),s("p",[t._v("一是将 token 注入到每个表单的隐藏的 "),s("code",[t._v("input")]),t._v(" 域中：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("csrf-token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("CIwNZNlR4XbisJF39I8yWnWX9wX4WFoz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("二是将 token 注入到 "),s("code",[t._v("meta")]),t._v(" 标签中：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("csrf-token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("CIwNZNlR4XbisJF39I8yWnWX9wX4WFoz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("前端若要发起 GET 请求，则通过 JS 获取 "),s("code",[t._v("meta")]),t._v(" 中的 token，并作为请求 URL 的参数，形如 "),s("code",[t._v("http://test.com?csrftoken=CIwNZNlR4XbisJF39I8yWnWX9wX4WFoz")]),t._v(" ；若要发起 POST 请求，则直接提交表单即可，之前注入到表单中的 token 会自动作为请求体的参数")])]),t._v(" "),s("li",[s("p",[t._v("服务端拿到 GET 或者 POST 请求的 token 参数，与保存在 session 中的 token 比较，若相同则认为此次请求来自合法用户，否则认为来自恶意网站（恶意网站是拿不到 token 的，无法构造完整的请求）")])])]),t._v(" "),s("blockquote",[s("p",[t._v("模式二：隐藏表单域 + cookie")])]),t._v(" "),s("ul",[s("li",[t._v("服务端生成一对互相关联的 CSRF token，一个 token 通过隐藏表单域下发到用户的前端页面中，另一个 token 注入到 "),s("code",[t._v("set-Cookie")]),t._v(" 字段中")]),t._v(" "),s("li",[t._v("前端提交表单发起 POST 请求，隐藏表单域中的 token 自动成为请求体的参数，"),s("code",[t._v("set-Cookie")]),t._v(" 中的 token 则被放到请求头部字段 Cookie 中")]),t._v(" "),s("li",[t._v("服务端对收到的两个 token 进行校验，校验通过则说明此次请求来自合法用户")])]),t._v(" "),s("p",[t._v("PS：这种模式不需要服务端通过 session 维护大量的 token。虽然恶意网站还是可以在请求中携带 Cookie（内含 token），但是由于它拿不到服务端返回给用户的隐藏表单域（内含 token） ，因此它的请求参数是缺失的，实际上无法通过服务端的校验。")]),t._v(" "),s("p",[s("strong",[t._v("验证码")])]),t._v(" "),s("p",[t._v("像删除数据这类敏感操作，如果不进行任何验证就直接执行操作，会有很大的风险。因此可以考虑使用验证码，但验证码应该只用于关键的业务节点中，滥用将会影响用户体验 —— 从这个角度来说，验证码更适合作为一个防御 CSRF 攻击的辅助手段。")]),t._v(" "),s("h2",{attrs:{id:"clickjacking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clickjacking"}},[t._v("#")]),t._v(" ClickJacking")]),t._v(" "),s("p",[t._v("ClickJacking 即点击劫持，指的是劫持用户的点击行为进行某些操作。")]),t._v(" "),s("p",[t._v("比如说有一个恶意网站 "),s("code",[t._v("http://evil.com")]),t._v("，有一个正常网站 "),s("code",[t._v("http://funnyvideo.com")]),t._v("，恶意网站的网页下面是一个透明的、引用了正常网站的 "),s("code",[t._v("iframe")]),t._v("。黑客诱导用户进入恶意网站并在网页中进行点击，看起来用户只是在点击恶意网站的网页，但实际上是在点击正常网站的网页。")]),t._v(" "),s("h3",{attrs:{id:"防御措施-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御措施-3"}},[t._v("#")]),t._v(" 防御措施")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("X-Frame-Options")]),t._v(" 实现：")])]),t._v(" "),s("p",[t._v("上述点击劫持发生的本质原因是恶意网站可以通过 "),s("code",[t._v("iframe")]),t._v(" 引用正常网站，如果我们设法禁止通过 "),s("code",[t._v("iframe")]),t._v(" 去引用正常网站，或者限制只有某些信任网站可以通过 "),s("code",[t._v("iframe")]),t._v(" 引用正常网站，那么就可以规避点击劫持。响应头部字段 "),s("code",[t._v("X-Frame-Options")]),t._v(" 就是来做这个事的，它可以设置下面的值：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("deny")]),t._v("：禁止任何网站通过 "),s("code",[t._v("iframe")]),t._v(" 引用正常网站")]),t._v(" "),s("li",[s("code",[t._v("sameorigin")]),t._v("：只允许同源网站通过 "),s("code",[t._v("iframe")]),t._v(" 引用正常网站")]),t._v(" "),s("li",[s("code",[t._v("allow-from")]),t._v("：只允许特定网站通过 "),s("code",[t._v("iframe")]),t._v(" 引用正常网站，比如 "),s("code",[t._v("allow-from http://test.com")]),t._v("，就表示 "),s("code",[t._v("http://test.com")]),t._v(" 是受信任的，可以引用正常网站")])]),t._v(" "),s("p",[s("strong",[t._v("JS 实现：")])]),t._v(" "),s("p",[t._v("对于某些不支持设置 "),s("code",[t._v("X-Frame-Options")]),t._v(" 头部字段的旧浏览器，可以使用 js 作为一种 callback 的方案。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当 A 网站通过 "),s("code",[t._v("iframe")]),t._v(" 引用 B 网站的时候，B 网站可以通过 "),s("code",[t._v("self")]),t._v(" 获取自身 "),s("code",[t._v("window")]),t._v(" 对象，通过 "),s("code",[t._v("top")]),t._v(" 获取 A 网站的 "),s("code",[t._v("window")]),t._v(" 对象，因此 B 网站可以使用 "),s("code",[t._v("top == self")]),t._v(" 判断自身是否被其它网站通过 "),s("code",[t._v("iframe")]),t._v(" 引用。")])]),t._v(" "),s("li",[s("p",[t._v("同时，它还可以通过 "),s("code",[t._v("top.location.href")]),t._v(" 获取引用自己的网站的 URL，据此可以通过模式匹配实现网站过滤，只允许信任的网站引用自己。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" style "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'html{display:none!important;}'")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("上面的代码处理方式比较粗糙，如果 "),s("code",[t._v("top")]),t._v(" 不等于 "),s("code",[t._v("self")]),t._v("，说明有其它网站引用了自己，那么就隐藏自身的所有内容，同时让第三方网站跳转到自身。当然，可以修改代码实现类似于 "),s("code",[t._v("X-Frame-Options")]),t._v(" 各个参数的效果。")]),t._v(" "),s("h2",{attrs:{id:"中间人攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),s("p",[t._v("中间人攻击（Man-in-middle Attack）指的是，攻击者充当一个中间人的角色，与通信的两端分别创建独立的联系，对传输的数据进行劫持和篡改。整个会话被中间人操控，但通信的两端都以为是在和对方通信。中间人攻击发生的原因在于通信双方没有采用数字签名、数字证书等手段验证对方身份。")]),t._v(" "),s("p",[t._v("以前面讲过的混合加密过程为例，如果发生中间人攻击，过程大概如下：")]),t._v(" "),s("ul",[s("li",[t._v("客户端发送请求，请求获取服务端的公钥。中间人拦截请求，并将请求转发给服务端")]),t._v(" "),s("li",[t._v("服务端收到请求，生成一对公钥（服）和私钥（服），私钥（服）自己保管，公钥（服）发给中间人（服务端以为此时的中间人是客户端）")]),t._v(" "),s("li",[t._v("中间人拿到公钥（服）。同时生成自己的一对公钥（中）和私钥（中），冒充服务端将公钥（中）发给客户端")]),t._v(" "),s("li",[t._v("客户端收到公钥（中），生成会话密钥（客），用公钥（中）加密会话密钥（客），然后发给中间人（客户端以为此时的中间人是服务端）")]),t._v(" "),s("li",[t._v("中间人用私钥（中）解密，得到会话密钥（客）。同时生成自己的会话密钥（中），用公钥（服）加密之后发给服务端")]),t._v(" "),s("li",[t._v("服务端收到，用私钥（服）解密，拿到会话密钥（中），以为这是客户端发来的会话密钥（客），于是用这个会话密钥加密数据 XXX，发送给中间人")]),t._v(" "),s("li",[t._v("中间人收到，用会话密钥（中）进行解密，拿到数据 XXX 后进行篡改，得到数据 YYY。接着用会话密钥（客）对数据 YYY 进行加密，发送给客户端")]),t._v(" "),s("li",[t._v("客户端收到数据 YYY，用会话密钥（客）加密数据 ZZZ，发给中间人")]),t._v(" "),s("li",[t._v("中间人收到，用会话密钥（客）进行解密，拿到数据 ZZZ 后进行篡改，得到数据 WWW。接着用会话密钥（中）对数据 WWW 进行加密，发送给服务端")]),t._v(" "),s("li",[t._v("服务端收到，用会话密钥（中）解密，拿到数据 WWW")]),t._v(" "),s("li",[t._v("……")])]),t._v(" "),s("p",[t._v("可以看到，中间人在客户端面前表现为服务端，在服务端面前又表现为客户端，两边来回劫持和篡改数据。下面的图更加清晰地展示了整个过程：")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://myblog-1258623898.cos.ap-chengdu.myqcloud.com/%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/17.jpg"}}),t._v(" "),s("h2",{attrs:{id:"dns-污染和劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-污染和劫持"}},[t._v("#")]),t._v(" DNS 污染和劫持")]),t._v(" "),s("h3",{attrs:{id:"dns-劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-劫持"}},[t._v("#")]),t._v(" DNS 劫持")]),t._v(" "),s("p",[t._v("DNS 劫持指的是劫持 DNS 服务器，获得对于某个域名的解析记录控制权，进而修改该域名的解析结果，返回一个错误的 IP 地址给客户端。DNS 劫持篡改的是 DNS 服务器上的数据，会导致用户无法访问某个网站，或者访问了一个假的克隆网站，从而导致个人信息泄露等。")]),t._v(" "),s("p",[s("strong",[t._v("案例")]),t._v("：访问谷歌但是打开的是百度")]),t._v(" "),s("p",[s("strong",[t._v("解决方案")]),t._v("：既然问题是出在 DNS 服务器，那么可以考虑手动更换 DNS 服务器为公共 DNS")]),t._v(" "),s("h3",{attrs:{id:"dns-污染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-污染"}},[t._v("#")]),t._v(" DNS 污染")]),t._v(" "),s("p",[t._v("DNS 污染属于 DNS 缓存投毒攻击，它把自己伪装成 DNS 服务器，将用户访问的域名指向不正确的 IP 地址然后返回。")]),t._v(" "),s("p",[s("strong",[t._v("案例：")]),t._v(" GFW 导致无法访问国外网站")]),t._v(" "),s("p",[s("strong",[t._v("解决方案：")]),t._v(" VPN 等")]),t._v(" "),s("h2",{attrs:{id:"http-劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-劫持"}},[t._v("#")]),t._v(" HTTP 劫持")]),t._v(" "),s("p",[t._v("发起 HTTP 劫持的可能是第三方运营商、局域网或者免费公共 Wi-Fi 等，发生的原因在于流量必须经过运营商、局域网、Wi-Fi 等，而 HTTP 本身又是明文传输的，这就给了它们对数据进行劫持和篡改的机会。")]),t._v(" "),s("p",[t._v("我们有时候在浏览某些网站的时候，经常会看到右下角有弹窗广告，实际上这不一定是网站本身投放的广告，往往是运营商进行 HTTP 劫持之后投放的。解决的方法也很简单，就是使用加密的 HTTPS。")])])}),[],!1,null,null,null);a.default=n.exports}}]);